import { createSlice } from "@reduxjs/toolkit";

// üîπ L·∫•y d·ªØ li·ªáu t·ª´ localStorage khi kh·ªüi t·∫°o
const savedUser = JSON.parse(localStorage.getItem("user")) || null;
const savedToken = localStorage.getItem("access_token") || null;

const initialState = {
  user: savedUser,
  token: savedToken,
  isAuthenticated: !!savedToken,
};

const userSlice = createSlice({
  name: "user",
  initialState,
  reducers: {
    setUser: (state, action) => {
      state.user = action.payload.user;
      state.token = action.payload.token;
      state.isAuthenticated = true;
      localStorage.setItem("user", JSON.stringify(action.payload.user));
      localStorage.setItem("access_token", action.payload.token);
    },

    logout: (state) => {
      state.user = null;
      state.token = null;
      state.isAuthenticated = false;
      localStorage.removeItem("user");
      localStorage.removeItem("access_token");
    },

    // ...
    // üÜï C·∫≠p nh·∫≠t th√¥ng tin user (sau khi ch·ªânh s·ª≠a h·ªì s∆°)
    updateUser: (state, action) => {
      // action.payload l√† object ch·ª©a c√°c tr∆∞·ªùng (name, email, phone, ...)
      state.user = { ...state.user, ...action.payload }; // Merge d·ªØ li·ªáu m·ªõi
      localStorage.setItem("user", JSON.stringify(state.user)); // c·∫≠p nh·∫≠t v√†o localStorage
      // L∆∞u √Ω: h√†m n√†y KH√îNG C·∫¨P NH·∫¨T state.token
    },
// ...
  },
});

export const { setUser, logout, updateUser } = userSlice.actions;
export default userSlice.reducer;
