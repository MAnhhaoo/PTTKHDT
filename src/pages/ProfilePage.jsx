import React, { useState, useEffect } from 'react'
import "./ProfilePage.css"
import * as UserService from "../Service/UserService";
import { useDispatch, useSelector } from "react-redux";
import { useMutation } from '@tanstack/react-query';
import { updateUser } from '../redux/userSlide'; // ƒê√£ s·ª≠a t√™n file slice cho ƒë√∫ng c√∫ ph√°p (slide -> slice)

function ProfilePage() {
    const { user } = useSelector((state) => state.user);
    
    console.log("D·ªØ li·ªáu User hi·ªán t·∫°i:", user); 
    console.log("ID c·ªßa User l√†:", user?.id); // Ki·ªÉm tra tr∆∞·ªùng ID ƒë√∫ng l√† 'id'
    
    const [name , setName] = useState(user?.name || '')
    const [email , setEmail] = useState(user?.email || '')
    const [phone , setPhone] = useState(user?.phone || '')
    const [address , setAddress] = useState(user?.address || '')
    const dispatch = useDispatch();

    // üí° C·∫≠p nh·∫≠t state local khi user Redux thay ƒë·ªïi (ƒë·ªÉ ƒë·ªìng b·ªô khi load/update)
    useEffect(() => {
        if (user) {
            setName(user.name || '');
            setEmail(user.email || '');
            setPhone(user.phone || '');
            setAddress(user.address || '');
        }
    }, [user])
    
    // motation l√† ƒë·ªÉ call API
    const mutation = useMutation({
        // ƒê√£ s·ª≠a ƒë·ªÉ nh·∫≠n ID v√† Data t√°ch bi·ªát
        mutationFn: ({ id, data }) => UserService.updateser(id, data),
        onSuccess: (data) => {
            // Server tr·∫£ v·ªÅ user ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
            const updatedUser = data.data; 
            // 1. C·∫≠p nh·∫≠t Redux state (S·∫Ω t·ª± ƒë·ªông trigger useEffect v√† c·∫≠p nh·∫≠t UI)
            dispatch(
                updateUser(updatedUser) // Truy·ªÅn object user ƒë√£ c·∫≠p nh·∫≠t
            );
            
           
            
            alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
        },
        onError: (error) => {
            console.error("L·ªói c·∫≠p nh·∫≠t:", error);
            alert("L·ªói c·∫≠p nh·∫≠t th√¥ng tin.");
        },
    })

    // H√†m chung ƒë·ªÉ x·ª≠ l√Ω c·∫≠p nh·∫≠t cho T·ª™NG tr∆∞·ªùng
    const handleUpdate = (field, value) => {
        const userId = user?.id; 

        if (!userId) { 
            alert("Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng.");
            return;
        }

        const dataToUpdate = {
            [field]: value
        };

        mutation.mutate({
            id: userId,
            data: dataToUpdate
        });
    }

    return (
        <div>
            <div className='container'>
                <div>
                    <div className="user-info-box">
                        <h2 style={{fontSize: "25px"}}>Th√¥ng tin ng∆∞·ªùi d√πng</h2>
                        <div className="content_user">
                            {/* C·∫≠p nh·∫≠t T√™n */}
                            <div className="user-field">
                                {/* üí° Gi·ªØ nguy√™n: user?.name ƒë√£ t·ª± ƒë·ªông c·∫≠p nh·∫≠t nh·ªù Redux v√† useEffect */}
                                <label>T√™n {user?.name}</label> 
                                <div className="input-group">
                                    <input value={name} onChange={(e)=> setName(e.target.value)} type="text" placeholder="Nh·∫≠p t√™n c·ªßa b·∫°n" />
                                    <button onClick={() => handleUpdate('name', name)}>C·∫≠p nh·∫≠t</button>
                                </div>
                            </div>

                            {/* C·∫≠p nh·∫≠t Email */}
                            <div className="user-field">
                                <label>Email {user?.email}</label>
                                <div className="input-group">
                                    <input value={email} onChange={(e)=> setEmail(e.target.value)} type="text" placeholder="Nh·∫≠p email m·ªõi" />
                                    <button onClick={() => handleUpdate('email', email)}>C·∫≠p nh·∫≠t</button>
                                </div>
                            </div>

                            {/* C·∫≠p nh·∫≠t S·ªë ƒëi·ªán tho·∫°i */}
                            <div className="user-field">
                                <label>S·ªë ƒëi·ªán tho·∫°i {user?.phone}</label>
                                <div className="input-group">
                                    <input value={phone} onChange={(e)=> setPhone(e.target.value)} type="text" placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
                                    <button onClick={() => handleUpdate('phone', phone)}>C·∫≠p nh·∫≠t</button>
                                </div>
                            </div>

                            {/* C·∫≠p nh·∫≠t ƒê·ªãa ch·ªâ */}
                            <div className="user-field">
                                <label>ƒê·ªãa ch·ªâ {user?.address}</label>
                                <div className="input-group">
                                    <input value={address} onChange={(e)=> setAddress(e.target.value)} type="text" placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ c·ªßa b·∫°n" />
                                    <button onClick={() => handleUpdate('address', address)}>C·∫≠p nh·∫≠t</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}

export default ProfilePage